// Generated by CIRCT firtool-1.62.1
module ConvController(
  input        clock,
               reset,
               io_enable,
  output       io_weightAutoTileEn,
               io_inputAutoTileEn,
               io_weightBufferLoadEn,
               io_weightBufferOutEn,
               io_inputBufferLoadEn,
               io_inputBufferOutEn,
               io_inputBufferDelayClear,
               io_weightStationary,
               io_outputBufferLoadEn,
               io_outputBufferOutEn,
               io_outputBufferLoadClear,
               io_outputBufferAccClear,
               io_outputBufferAccEn,
               io_tileInputNextColEn,
               io_tileInputNextIterationEn,
               io_tileWeightNextRowEn,
  output [2:0] io_tileRowIdx,
  output [4:0] io_tileColIdx,
               io_innerLoopIdx
);

  reg  [3:0] currentState;
  reg  [5:0] stateCycleCnt;
  reg        matMulStart;
  reg  [4:0] innerLoopCnt;
  reg  [4:0] middleLoopCnt;
  reg  [2:0] outerLoopCnt;
  wire       _GEN = currentState == 4'h0;
  wire       _GEN_0 = currentState == 4'h1;
  wire       io_weightAutoTileEn_0 = ~_GEN & _GEN_0;
  wire       _GEN_1 = currentState == 4'h2;
  wire       io_inputAutoTileEn_0 = ~(_GEN | _GEN_0) & _GEN_1;
  wire       _GEN_2 = currentState == 4'h3;
  wire       _GEN_3 = currentState == 4'h4;
  wire       _GEN_4 = currentState == 4'h5;
  wire       _GEN_5 = currentState == 4'h6;
  wire       io_outputBufferLoadClear_0 =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4) & _GEN_5;
  wire       _GEN_6 = currentState == 4'h7;
  wire       _GEN_7 = innerLoopCnt == 5'h12;
  wire       _GEN_8 = _GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5;
  reg        io_weightBufferLoadEn_REG;
  reg        io_inputBufferLoadEn_REG;
  reg        io_weightStationary_REG;
  reg        io_weightBufferOutEn_REG;
  reg        io_inputBufferOutEn_REG;
  always @(posedge clock) begin
    if (reset) begin
      currentState <= 4'h0;
      stateCycleCnt <= 6'h0;
      matMulStart <= 1'h0;
      innerLoopCnt <= 5'h0;
      middleLoopCnt <= 5'h0;
      outerLoopCnt <= 3'h0;
    end
    else begin
      automatic logic _GEN_9;
      automatic logic _GEN_10;
      _GEN_9 = stateCycleCnt == 6'h23;
      _GEN_10 = middleLoopCnt == 5'h18;
      if (_GEN) begin
        if (io_enable) begin
          currentState <= 4'h1;
          stateCycleCnt <= 6'h0;
        end
      end
      else begin
        automatic logic _GEN_11;
        _GEN_11 = stateCycleCnt == 6'h7;
        if (_GEN_0) begin
          if (_GEN_11) begin
            currentState <= 4'h2;
            stateCycleCnt <= 6'h0;
          end
          else
            stateCycleCnt <= stateCycleCnt + 6'h1;
        end
        else if (_GEN_1) begin
          if (_GEN_11) begin
            currentState <= 4'h3;
            stateCycleCnt <= 6'h0;
          end
          else
            stateCycleCnt <= stateCycleCnt + 6'h1;
        end
        else if (_GEN_2) begin
          if (stateCycleCnt == 6'h21) begin
            currentState <= 4'h4;
            stateCycleCnt <= 6'h0;
          end
          else
            stateCycleCnt <= stateCycleCnt + 6'h1;
        end
        else if (_GEN_3) begin
          if (_GEN_9) begin
            currentState <= 4'h5;
            stateCycleCnt <= 6'h0;
          end
          else
            stateCycleCnt <= stateCycleCnt + 6'h1;
        end
        else begin
          automatic logic _GEN_12;
          _GEN_12 = stateCycleCnt == 6'h0;
          if (_GEN_4) begin
            if (_GEN_12) begin
              currentState <= 4'h6;
              stateCycleCnt <= 6'h0;
            end
            else
              stateCycleCnt <= stateCycleCnt + 6'h1;
          end
          else if (_GEN_5) begin
            if (_GEN_12) begin
              currentState <= 4'h7;
              stateCycleCnt <= 6'h0;
            end
            else
              stateCycleCnt <= stateCycleCnt + 6'h1;
          end
          else if (_GEN_6)
            currentState <= 4'h0;
        end
      end
      if (~(_GEN | _GEN_0 | _GEN_1))
        matMulStart <= _GEN_2 | (_GEN_3 ? ~_GEN_9 : matMulStart);
      if (_GEN_8 | ~_GEN_6) begin
      end
      else if (_GEN_7)
        innerLoopCnt <= 5'h0;
      else
        innerLoopCnt <= innerLoopCnt + 5'h1;
      if (_GEN_8 | ~(_GEN_6 & _GEN_7)) begin
      end
      else if (_GEN_10)
        middleLoopCnt <= 5'h0;
      else
        middleLoopCnt <= middleLoopCnt + 5'h1;
      if (_GEN_8 | ~(_GEN_6 & _GEN_7 & _GEN_10)) begin
      end
      else if (&outerLoopCnt)
        outerLoopCnt <= 3'h0;
      else
        outerLoopCnt <= outerLoopCnt + 3'h1;
    end
    io_weightBufferLoadEn_REG <= io_weightAutoTileEn_0;
    io_inputBufferLoadEn_REG <= io_inputAutoTileEn_0;
    io_weightStationary_REG <= io_inputAutoTileEn_0;
    io_weightBufferOutEn_REG <= io_inputAutoTileEn_0;
    io_inputBufferOutEn_REG <= matMulStart;
  end // always @(posedge)
  assign io_weightAutoTileEn = io_weightAutoTileEn_0;
  assign io_inputAutoTileEn = io_inputAutoTileEn_0;
  assign io_weightBufferLoadEn = io_weightBufferLoadEn_REG;
  assign io_weightBufferOutEn = io_weightBufferOutEn_REG;
  assign io_inputBufferLoadEn = io_inputBufferLoadEn_REG;
  assign io_inputBufferOutEn = io_inputBufferOutEn_REG;
  assign io_inputBufferDelayClear = io_outputBufferLoadClear_0;
  assign io_weightStationary = io_weightStationary_REG;
  assign io_outputBufferLoadEn = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2) & _GEN_3;
  assign io_outputBufferOutEn = 1'h0;
  assign io_outputBufferLoadClear = io_outputBufferLoadClear_0;
  assign io_outputBufferAccClear = ~_GEN_8 & _GEN_6 & _GEN_7;
  assign io_outputBufferAccEn = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3) & _GEN_4;
  assign io_tileInputNextColEn = innerLoopCnt == 5'h12 & middleLoopCnt != 5'h17;
  assign io_tileInputNextIterationEn = innerLoopCnt == 5'h12 & middleLoopCnt == 5'h17;
  assign io_tileWeightNextRowEn = innerLoopCnt == 5'h12 & middleLoopCnt == 5'h17;
  assign io_tileRowIdx = outerLoopCnt;
  assign io_tileColIdx = middleLoopCnt;
  assign io_innerLoopIdx = innerLoopCnt - 5'h1;
endmodule

